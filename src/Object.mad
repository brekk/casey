import type { Random } from "Random"

import type { Stuff } from "@/Types"

import Fn from "Function"
import List from "List"
import { Just, Nothing, isJust } from "Maybe"
import Random from "Random"
import String from "String"

import { Immutable, Mutable } from "@/Types"



////// ACCESSORS

id :: Stuff -> String
export id = where {
  Mutable(x, _, _) =>
    x

  Immutable(x, _, _) =>
    x
}

name :: Stuff -> String
export name = where {
  Mutable(_, x, _) =>
    x

  Immutable(_, x, _) =>
    x
}

assets :: Stuff -> List String
export assets = where {
  Mutable(_, _, x) =>
    x

  Immutable(_, _, x) =>
    x
}

///////// CONSTRUCTORS

create :: String -> String -> Stuff
export create = Mutable($, $, [])

createImmutable :: String -> String -> Stuff
export createImmutable = Immutable($, $, [])

//////// TRANSFORMERS

// copy stuff with a new id
clone :: String -> Stuff -> Stuff
export clone = (i, s) => where(s) {
  Mutable(_, n, a) =>
    Mutable(i, n, a)

  Immutable(_, n, a) =>
    Immutable(i, n, a)
}

// copy stuff with a new name
rename :: String -> Stuff -> Stuff
export rename = (x, s) => where(s) {
  Mutable(i, _, a) =>
    Mutable(i, x, a)

  Immutable(i, _, a) =>
    Immutable(i, x, a)
}

hasName :: String -> Stuff -> Boolean
export hasName = (n, s) => pipe(
  name,
  Fn.equals(n),
)(s)

cast :: Stuff -> Stuff
export cast = (x) => where(x) {
  Mutable(i, n, a) =>
    Immutable(i, n, a)

  _ =>
    x
}

permute :: Stuff -> Stuff
export permute = (x) => where(x) {
  Immutable(i, n, a) =>
    Mutable(i, n, a)

  _ =>
    x
}

ALPHANUMERIC = String.split("", "abcdefghjiklmnopqrtuvwxyz0123456789")

uuid :: Random -> String
uuid = (r) => pipe(
  List.repeatWith(() => Random.pick(ALPHANUMERIC, r)),
  List.reduce(
    (agg, x) => where(x) {
      Just(y) =>
        List.append(y, agg)

      _ =>
        agg
    },
    [],
  ),
  (x) => {
    cut = List.slice($, $, x)
    return [cut(0, 3), cut(4, 15), cut(16, 19)]
  },
  map(String.join("")),
  String.join("-"),
)(20)

alias Creator = { copy :: Stuff -> Stuff, hew :: String -> Stuff, make :: String -> Stuff }

makeWithSeed :: String -> Creator
export makeWithSeed = (seed) => {
  r = Random.generateFromString(seed)
  return {
    make: (n) => pipe(
      uuid,
      create($, n),
    )(r),
    hew: (n) => pipe(
      uuid,
      createImmutable($, n),
    )(r),
    copy: (input) => pipe(
      uuid,
      clone($, input),
    )(r),
  }
}
